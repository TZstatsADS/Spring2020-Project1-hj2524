# Train model
model <- lm(y~poly(x,degree=degree),data=data)
# Predict test cases
y.test.hat <- predict(model,newdata=data.frame(x=x.test))
# Return y test case
return(y.test.hat)
}
x.plot <- seq(4,20,by=.01)
x.test <- c(10,16)
# Predict for degree=1
y.pred.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.1 <- predict.test.case(degree=1,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=2
y.pred.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.2 <- predict.test.case(degree=2,
data=sim.data.train$data.train,
x.test=x.plot)
# Predict for degree=3
y.pred.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.test)
y.plot.3 <- predict.test.case(degree=3,
data=sim.data.train$data.train,
x.test=x.plot)
# Plot simulated data
x <- sim.data.train$data.train$x
y <- sim.data.train$data.train$y
plot(x,y,main="Simulated Data")
abline(h=0,lty=2)
# Plot f(x)
lines(x.plot,true.f(x.plot),lwd=1.5,col="red")
# Plot the estimated curves
lines(x.plot,y.plot.1,lwd=1.5,col="green")
lines(x.plot,y.plot.2,lwd=1.5,col="purple")
lines(x.plot,y.plot.3,lwd=1.5,col="orange")
# Plot test cases
y.test <- sim.data.train$y.test
abline(v=x.test,col="grey")
points(x.test,y.test,pch=20,cex=1.5,col="blue")
# Plot estimated test cases
points(x.test,y.pred.1,pch=20,cex=1.5,col="green")
points(x.test,y.pred.2,pch=20,cex=1.5,col="purple")
points(x.test,y.pred.3,pch=20,cex=1.5,col="orange")
# Legend
legend("topleft",
legend=c("f(x)","Test Case","Degree 1","Degree 2","Degree 3"),
fill=c("red","blue","green","purple","orange"),
cex=.5)
poly.predict <- function(degree.vec,
data,
x.test) {
# Vectorize predict.test.case()
pred <- sapply(degree.vec,
predict.test.case,
data=data,
x.test=x.test)
# Name rows and columns
rownames(pred)  <- paste("TestCase",1:length(x.test),sep="")
colnames(pred)  <- paste("D",degree.vec,sep="")
# Return
return(pred)
}
# Test function poly.predict()
x.test <- c(10,16)
poly.predict(degree.vec=1:4,
data=sim.data.train$data.train,
x.test=x.test)
# Solution goes here -----------
x.test <- c(10,16)
mat.pred.1<-NULL
mat.pred.2<-NULL
y.test.mat<-NULL
R<-1000
set.seed(1)
for (i in 1:R) {
sim.data.train <- sim.training(x.test=x.test)
pred<-poly.predict(degree.vec=1:5,
data=sim.data.train$data.train,
x.test=x.test)
y.test.mat<-cbind(y.test.mat,sim.data.train$y.test)
mat.pred.1<-cbind(mat.pred.1,pred[1,])
mat.pred.2<-cbind(mat.pred.2,pred[2,])
}
mat.pred.1[,1:3]
mat.pred.2[,1:3]
y.test.mat[,1:3]
# Solution goes here -----------
#MSE
MSE.1<-NULL
MSE.2<-NULL
for (D in 1:5){
MSE.1<-c(MSE.1,mean((y.test.mat[1,]-mat.pred.1[D,])^2))
MSE.2<-c(MSE.2,mean((y.test.mat[2,]-mat.pred.2[D,])^2))
}
#Var
var.1<-NULL
var.2<-NULL
for (D in 1:5){
var.1<-c(var.1,mat.pred.1[D,]%>%var)
var.2<-c(var.2,mat.pred.2[D,]%>%var)
}
#squared.bias????????????
squared.bias<-(rowMeans(y.test.mat)-true.f(x.test))^2
# Solution goes here -----------
#x=10
plot(1:5,MSE.1,pch=20,cex=1.5,col="blue",xlab="degree of polynomial",ylab="",main="x_0=10")
par(new=TRUE)
plot(1:5,var.1,pch=20,cex=1.5,col="green",xlab="",ylab="")
legend("topright",legend=c("MSE","Variance"),
text.col=c("blue","green"),pch=c(16,15),col=c("blue","green"))
#x=16
plot(1:5,MSE.2,pch=20,cex=1.5,col="blue",xlab="degree of polynomial",ylab="",main="x_0=16")
par(new=TRUE)
plot(1:5,var.2,pch=20,cex=1.5,col="green",xlab="",ylab="")
legend("topright",legend=c("MSE","Variance"),
text.col=c("blue","green"),pch=c(16,15),col=c("blue","green"))
install.packages("doParallel")
library(doParallel)
n0<-Sys.time()
s<- rep(0,10000)
for (i in 1:10000 ){
s[i]<- mean(rnorm(10000))
}
install.packages("doParallel")
n1<-Sys.time()
n2<-Sys.time()
detectCores()
registerDoParallel(4)
s<- foreach(i=1:10000,.combine = "t") %dopar% {
mean(rnorm(10000))
}
n3<-Sys.time()
mat.pred.1%>%rowMeans()
mat.pred.1%>%rowMeans()-true.f(x.test)
mat.pred.1%>%rowMeans()-true.f(x.test[1])
# Solution goes here -----------
#MSE
MSE.1<-NULL
MSE.2<-NULL
for (D in 1:5){
MSE.1<-c(MSE.1,mean((y.test.mat[1,]-mat.pred.1[D,])^2))
MSE.2<-c(MSE.2,mean((y.test.mat[2,]-mat.pred.2[D,])^2))
}
#Var
var.1<-NULL
var.2<-NULL
for (D in 1:5){
var.1<-c(var.1,mat.pred.1[D,]%>%var)
var.2<-c(var.2,mat.pred.2[D,]%>%var)
}
#squared.bias????????????
bias.1<-mat.pred.1%>%rowMeans()-true.f(x.test[1])
bias.2<-mat.pred.2%>%rowMeans()-true.f(x.test[2])
plot(1:5,MSE.1,pch=20,cex=1.5,col="blue",xlab="degree of polynomial",ylab="",main="x_0=10")
par(new=TRUE)
plot(1:5,var.1,pch=20,cex=1.5,col="green",xlab="",ylab="")
par(new=TRUE)
plot(1:5,bias.1,pch=20,cex=1.5,col="red",xlab="",ylab="")
legend("topright",legend=c("MSE","Variance","bias"),
text.col=c("blue","green","red"),pch=c(16,15),col=c("blue","green","red"))
# Solution goes here -----------
#x=10
plot(1:5,MSE.1,pch=20,cex=1.5,col="blue",xlab="degree of polynomial",ylab="",main="x_0=10")
par(new=TRUE)
plot(1:5,var.1,pch=20,cex=1.5,col="green",xlab="",ylab="")
par(new=TRUE)
plot(1:5,bias.1,pch=20,cex=1.5,col="red",xlab="",ylab="")
legend("topright",legend=c("MSE","Variance","bias"),
text.col=c("blue","green","red"),pch=c(16,15),col=c("blue","green","red"))
#x=16
plot(1:5,MSE.2,pch=20,cex=1.5,col="blue",xlab="degree of polynomial",ylab="",main="x_0=16")
par(new=TRUE)
plot(1:5,var.2,pch=20,cex=1.5,col="green",xlab="",ylab="")
par(new=TRUE)
plot(1:5,bias.2,pch=20,cex=1.5,col="red",xlab="",ylab="")
legend("topright",legend=c("MSE","Variance","bias"),
text.col=c("blue","green","red"),pch=c(16,15),col=c("blue","green","red"))
MSE.1
var.1
bias.1
MSE.2
var.2
bias.2
bias.23
bias.2
bias.2%>%names()<-NULL
names(bias.2)<-NULL
bias.2
as.vector(bias.1)
# Solution goes here -----------
#MSE
MSE.1<-NULL
MSE.2<-NULL
for (D in 1:5){
MSE.1<-c(MSE.1,mean((y.test.mat[1,]-mat.pred.1[D,])^2))
MSE.2<-c(MSE.2,mean((y.test.mat[2,]-mat.pred.2[D,])^2))
}
#Var
var.1<-NULL
var.2<-NULL
for (D in 1:5){
var.1<-c(var.1,mat.pred.1[D,]%>%var)
var.2<-c(var.2,mat.pred.2[D,]%>%var)
}
#squared.bias
bias.1<-as.vector(mat.pred.1%>%rowMeans()-true.f(x.test[1]))
bias.2<-as.vector(mat.pred.2%>%rowMeans()-true.f(x.test[2]))
MSE.1
var.1
bias.1
MSE.2
var.2
bias.2
function(x){sin(x*1)*cos(x*2)}
function(2)
function(x){sin(x*1)*cos(x*2)}
library(tidyverse)
function(x){sin(x*1)*cos(x*2)}
function(x){}
function(x){return(sin(x*1)*cos(x*2))}
function(x){1+x}
f<-function(x){sin(x*1)*cos(x*2)}
f(1)
f(\pi)
f(pi)
f(2pi)
f(2*pi)
View(f)
knitr::opts_chunk$set(echo = TRUE)
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
# load lyrics data
load('../data/lyrics.RData')
# function for removimg leading and trailing whitespace from character strings
leadingWhitespace <- content_transformer(function(x) str_trim(x, side = "both"))
# remove stop words
data("stop_words")
word <- c("lot", "today", "months", "month", "wanna", "wouldnt", "wasnt", "ha", "na", "ooh", "da",
"gonna", "im", "dont", "aint", "wont", "yeah", "la", "oi", "nigga", "fuck",
"hey", "year", "years", "last", "past", "feel")
stop_words <- c(stop_words$word, word)
# clean the data and make a corpus
corpus <- VCorpus(VectorSource(dt_lyrics$lyrics))%>%
tm_map(content_transformer(tolower))%>%
tm_map(removeWords, stop_words)%>%
tm_map(removePunctuation)%>%
tm_map(removeWords, character(0))%>%
tm_map(removeNumbers)%>%
tm_map(stripWhitespace)%>%
tm_map(leadingWhitespace)
stemmed <- tm_map(corpus, stemDocument) %>%
tidy() %>%
select(text)
dict <- tidy(corpus) %>%
select(text) %>%
unnest_tokens(dictionary, text)
completed <- stemmed %>%
mutate(id = row_number()) %>%
unnest_tokens(stems, text) %>%
bind_cols(dict)
completed <- completed %>%
group_by(stems) %>%
count(dictionary) %>%
mutate(word = dictionary[which.max(n)]) %>%
ungroup() %>%
select(stems, word) %>%
distinct() %>%
right_join(completed) %>%
select(-stems)
completed <- completed %>%
group_by(id) %>%
summarise(stemmedwords= str_c(word, collapse = " ")) %>%
ungroup()
dt_lyrics <- dt_lyrics %>%
mutate(id = row_number()) %>%
inner_join(completed)
save(dt_lyrics, file="../output/processed_lyrics.RData")
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "tidytext","tidyverse","DT","wordcloud","data.table","RColorBrewer","reshape2")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(RColorBrewer)
library(reshape2)
source("../lib/function_defined.R")
# load lyrics data from Text_processed
load('../output/processed_lyrics.RData')
# load artists information
artists <- read_csv("~/GitHub/Spring2020-Project1-hj2524/data/artists.csv")
# find a list of team artist
team_list<-artists%>%select(-Intro,-Origin)%>%filter(!is.na(Formed)|!is.na(Members))%>%filter(is.na(Formed)|!Formed==199)%>%pull(Artist)
# add a column that indicates team or individual
data<-dt_lyrics%>%mutate(team=artist%in%team_list)%>%filter(year>1000)
# Filter out Pop music
data_Pop<-data%>%filter(genre%in% c("Pop"))
# Export data
save(data_Pop, file="../output/data_Pop.RData")
# import sentiment nrc
nrc <- get_sentiments("nrc")
# combine sentiment with TDM of lyrics of pop music.
pop_nrc<-tdm(data_Pop)%>%inner_join(nrc,by=c("term"="word"))%>%rename("n"=`sum(count)`)
# Keep those positive and negative sentiments data.
pop_plot_sentiment<-pop_nrc %>%
filter(sentiment%in%c("positive","negative"))%>%
group_by(sentiment)
# Export data
save(pop_plot_sentiment, file="../output/pop_plot_sentiment.RData")
# import sentiment bing
bing<-get_sentiments("bing")
# For any artists among all types of music,
# count the frequent of positive & negative words in lyrics of all of her songs,
# and find if there are more positive words or more negative words in all of her songs.
data_plot_sentiment<-
data%>%group_by(genre,artist)%>%
nest%>%mutate(tdm=map(data,tdm))%>%select(-data)%>%
unnest(col=c("tdm"))%>%
inner_join(bing,by=c("term"="word"))%>%rename("n"=`sum(count)`)%>%
group_by(genre,artist,sentiment)%>%summarise(n=n())%>%
spread(sentiment,n)%>%
transmute(n=positive-negative)
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "tidytext","tidyverse","DT","wordcloud","data.table","RColorBrewer","reshape2")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(RColorBrewer)
library(reshape2)
source("../lib/function_defined.R")
# load lyrics data from Text_processed
load('../output/processed_lyrics.RData')
# load artists information
artists <- read_csv("~/GitHub/Spring2020-Project1-hj2524/data/artists.csv")
# find a list of team artist
team_list<-artists%>%select(-Intro,-Origin)%>%filter(!is.na(Formed)|!is.na(Members))%>%filter(is.na(Formed)|!Formed==199)%>%pull(Artist)
# add a column that indicates team or individual
data<-dt_lyrics%>%mutate(team=artist%in%team_list)%>%filter(year>1000)
# Filter out Pop music
data_Pop<-data%>%filter(genre%in% c("Pop"))
# Export data
save(data_Pop, file="../output/data_Pop.RData")
# import sentiment nrc
nrc <- get_sentiments("nrc")
# combine sentiment with TDM of lyrics of pop music.
pop_nrc<-tdm(data_Pop)%>%inner_join(nrc,by=c("term"="word"))%>%rename("n"=`sum(count)`)
# Keep those positive and negative sentiments data.
pop_plot_sentiment<-pop_nrc %>%
filter(sentiment%in%c("positive","negative"))%>%
group_by(sentiment)
# Export data
save(pop_plot_sentiment, file="../output/pop_plot_sentiment.RData")
# import sentiment bing
bing<-get_sentiments("bing")
# For any artists among all types of music,
# count the frequent of positive & negative words in lyrics of all of her songs,
# and find if there are more positive words or more negative words in all of her songs.
data_plot_sentiment<-
data%>%group_by(genre,artist)%>%
nest%>%mutate(tdm=map(data,tdm))%>%select(-data)%>%
unnest(col=c("tdm"))%>%
inner_join(bing,by=c("term"="word"))%>%rename("n"=`sum(count)`)%>%
group_by(genre,artist,sentiment)%>%summarise(n=n())%>%
spread(sentiment,n)%>%
transmute(n=positive-negative)
# Export data
save(data_plot_sentiment, file="../output/data_plot_sentiment.RData")
knitr::opts_chunk$set(echo = TRUE)
packages.used=c("tm", "tidytext","tidyverse","DT","wordcloud","data.table","RColorBrewer","reshape2")
# check packages that need to be installed.
packages.needed=setdiff(packages.used,
intersect(installed.packages()[,1],
packages.used))
# install additional packages
if(length(packages.needed)>0){
install.packages(packages.needed, dependencies = TRUE)
}
# load packages
library(tm)
library(data.table)
library(tidytext)
library(tidyverse)
library(DT)
library(wordcloud)
library(RColorBrewer)
library(reshape2)
# load functions
source("../lib/function_defined.R")
# load datasets
load("../output/data_Pop.RData")
load("../output/pop_plot_sentiment.RData")
load("../output/data_plot_sentiment.RData")
wordcloudplot(tdm(data_Pop))
pop_plot_sentiment%>%
top_n(10,n)%>%
ungroup() %>%
mutate(term = reorder(term, n)) %>%
ggplot(aes(term, n, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(y = "Contribution to sentiment",
x = NULL) +
coord_flip()+
theme_light()
pop_plot_sentiment%>%
acast(term ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 150)
data_plot_sentiment%>%drop_na()%>%
ggplot(aes(seq_along(n),n,fill=genre))+
geom_col(show.legend = F)+
facet_wrap(~genre,ncol=6,scales="free_x")+
labs(x="artists",y="diff=(positive-negative)")+
theme_light()
xx<-tibble(emotions=c("anger","anticipation","disgust"),country=c(3,5,7),country3=c(3,5,7),country2=c(3,5,7))
library(tidyverse)
xx<-tibble(emotions=c("anger","anticipation","disgust"),country=c(3,5,7),country3=c(3,5,7),country2=c(3,5,7))
xx
xx%>%
ggplot(aes(emotions, n, fill = emotions)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()
xx%>%pivot_longer(-emotions,names_to = genre, values_to = n)
xx%>%pivot_longer(-emotions,names_to = "genre", values_to = "n")
xx<-tibble(emotions=c("anger","anticipation","disgust"),country=c(13,75,27),indie=c(83,35,67),pop=c(53,35,87))
xx%>%pivot_longer(-emotions,names_to = "genre", values_to = "n")
xx%>%pivot_longer(-emotions,names_to = "genre", values_to = "n")->xx
xx%>%
ggplot(aes(emotions, n, fill = emotions)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()
xx%>%
ggplot(aes(emotions, n, fill = genre)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()
xx%>%
ggplot(aes(emotions, n, fill = genre)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()+
facet_wrap(~genre)
xx<-tibble(emotions=c("anger","anticipation","disgust"),country=c(13,75,27),indie=c(83,35,67),pop=c(53,35,87))
suiyi<-xx
suiyi
suiyi%>%pivot_longer(-emotions,names_to = "genre", values_to = "n")%>%
ggplot(aes(emotions, n, fill = genre)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()+
facet_wrap(~genre)
suiyi%>%pivot_longer(-emotions,names_to = "genre", values_to = "n")%>%
ggplot(aes(emotions, n, fill = emotions)) +
geom_col() +
theme(panel.grid.major.x = element_blank(),
axis.text.x = element_blank()) +
labs(x = NULL, y = NULL) +
coord_flip()+
facet_wrap(~genre)
load("../output/processed_lyrics.RData")
setwd("~/GitHub/Spring2020-Project1-hj2524")
load("../output/processed_lyrics.RData")
load("./output/processed_lyrics.RData")
load("./output/data_plot_sentiment.RData")
data_plot_sentiment
load("./output/pop_plot_sentiment.RData")
pop_plot_sentiment
xx<-pop_plot_sentiment$term
"not" %in% xx
